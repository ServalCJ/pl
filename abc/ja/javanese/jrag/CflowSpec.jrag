/*
 * Javanese transformation to AspectJ
 *  cflow pointcut manipulation
 * Copyright (C) Tetsuo Kamina, 2012-2015
 */

aspect CflowSpec {

  private PointcutExpr ContextDecl.makePointcutFromCflow(List<ParameterDeclaration> params, CflowPointcutExpr pcCflow) {
    PointcutExpr pc = (PointcutExpr)pcCflow.getPointcut().fullCopy();
    for (int i=0; i<params.getNumChild(); i++) {
      ParameterDeclaration p = params.getChildNoTransform(i);
      String monitorType = ((TypeAccess)p.getTypeAccess()).getID();
      String binding = pcCflow.getPointcut().matchMonitor(monitorType).elementAt(0);
      if (binding != null) {
        if (binding.equals("target")) {
          pc = new AndPointcutExpr(pc, new TargetPointcutExpr(new NameBindingPattern(new ExplicitTypeNamePattern(new ParseName(p.getID())))));
        } else if (binding.equals("this")) {
          pc = new AndPointcutExpr(pc, new ThisPointcutExpr(new NameBindingPattern(new ExplicitTypeNamePattern(new ParseName(p.getID())))));
        } else if (binding.equals("args")) {
          pc = new AndPointcutExpr(pc, new ArgsPointcutExpr(new List().add(new NameBindingPattern(new ExplicitTypeNamePattern(new ParseName(p.getID()))))));
        }
      }
    }
    return pc;
  }

  public AdviceDecl ContextDecl.enterCflowAdvice(MonitorDecl enclosing, CflowPointcutExpr pcCflow) {
    List<ParameterDeclaration> params = enclosing.getParameters();
    AdviceDecl retval = new AdviceDecl(new Modifiers(),
                          new BeforeSpec((List)params.fullCopy()),
                          makePointcutFromCflow(params, pcCflow),
                          new List(),
                          new Block(enterCflowStatements(params)));
    return retval;
  }

  public AdviceDecl ContextDecl.leaveCflowAdvice(MonitorDecl enclosing, CflowPointcutExpr pcCflow) {
    List<ParameterDeclaration> params = enclosing.getParameters();
    AdviceDecl retval = new AdviceDecl(new Modifiers(),
                          new AfterSpec((List)params.fullCopy()),
                          makePointcutFromCflow(params, pcCflow),
                          new List(),
                          new Block(leaveCflowStatements(params)));
    return retval;
  }

  private List<Stmt> ContextDecl.enterCflowStatements(List<ParameterDeclaration> params) {
    return getCflowStatements(params, true);
  }

  private List<Stmt> ContextDecl.leaveCflowStatements(List<ParameterDeclaration> params) {
    return getCflowStatements(params, false);
  }

  private List<Stmt> ContextDecl.getCflowStatements(List<ParameterDeclaration> params, boolean enter) {
    List<Stmt> stmts = new List<Stmt>();
    String verName = "_monitorkey";
    String typeName = null;
    if (params.getNumChild() > 0) {
      ParameterDeclaration p = params.getChildNoTransform(0);
      verName = p.getID();
      typeName = ((TypeAccess)p.getTypeAccess()).getID();
    }

    MonitorDecl monitorDecl = (MonitorDecl)getParent().getParent();

    // for statement "Monitor$Target monitor = (Monitor$Target)map.get(t)"
    setMonitorInstanceInAdvice(stmts, verName, typeName, monitorDecl);

    List<Stmt> ifStmts = ifMonitorNeqNull(stmts);

    for (java.util.Iterator<String> iter = monitorDecl.getTargetTypes().iterator(); iter.hasNext(); ) {
      String targetType = iter.next();
      List<Stmt> forStmts = forEachMonitorsInAdvice(stmts, targetType);

      // for statement "Target rcv = (Target)iter.next();"
      setTargetInstanceInAdvice(forStmts, targetType);

      Expr cond = null;
      if (enter) {
        // condition for "rcv.__cflow$C == 0"
        cond = new EQExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$" + getID())), new IntegerLiteral("0"));
      } else {
        // condition for "rcv.__cflow$C == 1"
        cond = new EQExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$" + getID())), new IntegerLiteral("1"));
      }

      List<Stmt> thenStmts = new List<Stmt>();
      List<Stmt> elseStmts = new List<Stmt>();
      forStmts.add(new IfStmt(cond, new Block(thenStmts), new Opt(new Block(elseStmts))));
      if (enter) {
        callSetActiveMethods(thenStmts, "setActiveCflow");
        // for statement "rcv.__cflow$C++;"
        thenStmts.add(new ExprStmt(new PostIncExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$"+getID())))));
        elseStmts.add(new ExprStmt(new PostIncExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$"+getID())))));
      } else {
        callSetActiveMethods(thenStmts, "setInactiveCflow");
        thenStmts.add(new ExprStmt(new PostDecExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$"+getID())))));
        elseStmts.add(new ExprStmt(new PostDecExpr(new ParseName("rcv").qualifiesAccess(new ParseName("__cflow$"+getID())))));
      }

    }

    return stmts;
  }

  private void ContextDecl.callSetActiveMethods(List<Stmt> forStmts, String name) {
    Access receiver = new ParseName("rcv");
    Access type = new ParseName("javanese").qualifiesAccess(new ParseName("generated")).qualifiesAccess(new ParseName("LayerManager"));
    VariableDecl lm = new VariableDecl("lm", new List(), new Opt());
    Access fAccess = receiver.qualifiesAccess(new ParseName("lm"));
    lm.setInit(fAccess);
    VarDeclStmt lmDecl = new VarDeclStmt(new Modifiers(new List()), type, new List().add(lm));
    forStmts.add(lmDecl);

    java.util.Vector<ActivateDecl> activates = ((MonitorDecl)getParent().getParent()).getActivateDecls();
    for (java.util.Iterator<ActivateDecl> it = activates.iterator(); it.hasNext(); ) {
      ActivateDecl aDecl = it.next();
      if (aDecl.usingContext(getID())) {
        String layerName = aDecl.getID();
        String resolveName = "resolve$" + layerName + "$" + getID();
        // for statement "lm.setActive/setInactive(lm.resolve$$Layer$$Context$);"
        List<Expr> args1 = new List<Expr>();
        args1.add(new ParseName("lm").qualifiesAccess(new ParseName(resolveName)));
        Access mRecv = new ParseName("lm").qualifiesAccess(new ParseName(name));
        MethodAccess m1 = new MethodAccess(name+layerName, args1);
        ((AbstractDot)mRecv).replaceLast(m1);
        forStmts.add(new ExprStmt(mRecv));
      }
    }
  }

  private void ClassDecl.insertCflowCounters(java.util.Vector<BodyDecl> add) {
    java.util.Vector<String> contexts = getCflowContexts();
    for (java.util.Iterator<String> iter = contexts.iterator(); iter.hasNext(); ) {
      String c = iter.next();
      VariableDecl ct = new VariableDecl("__cflow$"+c, new List(), new Opt());
      ct.setInit(new IntegerLiteral("0"));
      FieldDecl ctDecl =
        new FieldDecl(new Modifiers(new List().add(new Modifier("public"))),
                      new PrimitiveTypeAccess("int"),
                      new List().add(ct));
      add.add(ctDecl);
    }
  }

  private java.util.Vector<String> ClassDecl.getCflowContexts() {
    java.util.Vector<String> retval = new java.util.Vector<String>();
    for (java.util.Iterator<CflowPair> iter = Program.CFLOWPCTABLE.iterator(); iter.hasNext(); ) {
      CflowPair pair = iter.next();
      if (pair.getType().equals(getID())) {
        retval.add(pair.getContextName());
      }
    }
    return retval;
  }

}