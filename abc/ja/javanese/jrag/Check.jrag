/*
 * Javanese check.
 * Copyright (C) Tetsuo Kamina, 2012-2015
 */

aspect Check {

  eq PointcutActionSpec.getParameter(int i).isMethodParameter() = false;
  eq PointcutActionSpec.getParameter(int i).isConstructorParameter() = false;
  eq PointcutActionSpec.getParameter(int i).isExceptionHandlerParameter() = false;
  eq PointcutActionSpec.getParameter(int i).nameType() = NameType.TYPE_NAME;
  eq MonitorDecl.getParameter(int i).isMethodParameter() = false;
  eq MonitorDecl.getParameter(int i).isConstructorParameter() = false;
  eq MonitorDecl.getParameter(int i).isExceptionHandlerParameter() = false;

  eq PointcutSpec.getPointcutExpr().bindsInCurrentCflow(String name) = false;

  eq SubscribeDecl.getPointcutExpr().bindsInCurrentCflow(String name) = false;
  eq SubscribeDecl.getParameter(int i).isMethodParameter() = false;
  eq SubscribeDecl.getParameter(int i).isConstructorParameter() = false;
  eq SubscribeDecl.getParameter(int i).isExceptionHandlerParameter() = false;

  eq MonitorDecl.getBodyDecl(int i).lookupVariable(String name) {
    for (int j=0; j<getNumParameter(); j++) {
      if (getParameter(j).name().equals(name)) {
        return SimpleSet.emptySet.add(getParameter(j));
      }
    }
    return SimpleSet.emptySet;
  }

  eq ContextDecl.getFluentSpec().lookupVariable(String name) = lookupVariable(name);

  inh SimpleSet FluentSpec.lookupVariable(String name);
  eq ActiveUntilSpec.getActive().lookupVariable(String name) = lookupVariable(name);
  eq ActiveUntilSpec.getUntil().lookupVariable(String name) = lookupVariable(name);
  inh SimpleSet ActionSpec.lookupVariable(String name);

  inh SimpleSet SubscribeSpec.lookupVariable(String name);
  eq SubscribeDecl.getPointcutExpr().lookupVariable(String name) {
    return localLookupVariable(name);
  }
  eq SubscribeDecl.getParameter(int i).lookupVariable(String name) {
    return localLookupVariable(name);
  }
  eq SubscribeDecl.getParameter(int i).isPointcutVariable() = true;
  syn SimpleSet SubscribeDecl.localLookupVariable(String name) {
    for (int i=0; i<getNumParameter(); i++) {
      if (getParameter(i).name().equals(name)) {
        return SimpleSet.emptySet.add(getParameter(i));
      }
    }
    return SimpleSet.emptySet;
  }

  eq PointcutActionSpec.getPointcutExpr().bindsInCurrentCflow(String name) = 
    getPointcutExpr().binds(name) > 0;

  eq PointcutActionSpec.getParameter(int i).isPointcutVariable() = true;

  eq PointcutActionSpec.getParameter(int i).lookupVariable(String name) {
    return localLookupVariable(name);
  }

  syn SimpleSet PointcutActionSpec.localLookupVariable(String name) {
    for (int i=0; i<getNumParameter(); i++) {
      if (getParameter(i).name().equals(name)) {
        return SimpleSet.emptySet.add(getParameter(i));
      }
    }
    return SimpleSet.emptySet;
  }

  eq MonitorDecl.getBodyDecl(int j).lookupType(String name) {
    for (int i=0; i<getNumParameter(); i++) {
      if (((TypeAccess)getParameter(i).getTypeAccess()).getID().equals(name)){
        TypeDecl tDecl = lookupType(packageName(), name);        
        return SimpleSet.emptySet.add(tDecl);
//        return SimpleSet.emptySet.add(getParameter(i).getTypeAccess());
      }
    }
    return SimpleSet.emptySet;
  }

  eq MonitorDecl.getParameter(int i).lookupType(String name) {
    return cu.lookupType(name);
  }

  eq MonitorDecl.getParameter(int i).lookupType(String packageName, String typeName) {
    return cu.lookupType(packageName, typeName);
  }

  eq MonitorDecl.getBodyDecl(int i).lookupType(String packageName, String typeName) {
    return cu.lookupType(packageName, typeName);
  }

  public TypeDecl MonitorDecl.lookupType(String packageName, String name) {
    return cu.lookupType(packageName, name);
  }

  public boolean MonitorDecl.isNestedType() { return false; }

  eq ActivateBlock.getBlock().reachable() = true;
  eq DeactivateBlock.getBlock().reachable() = true;

  refine ErrorCheck public void ASTNode.collectErrors() {
    if (!isProceed) ErrorCheck.ASTNode.collectErrors();
  }

  refine ErrorCheck protected void ASTNode.error(String s) {
    ASTNode node = this;
    CompilationUnit cu = null;
    while(node != null && !(node instanceof CompilationUnit)) {
      if (node instanceof MonitorDecl) {
        cu = ((MonitorDecl)node).cu;
        break;
      }
      node = node.getParent();
    }
    if (cu == null) cu = (CompilationUnit)node;
    if(getNumChild() == 0 && getStart() != 0 && getEnd() != 0) {  
      int line = getLine(getStart());
      int column = getColumn(getStart());
      int endLine = getLine(getEnd());
      int endColumn = getColumn(getEnd());
      cu.errors.add(new Problem(sourceFile(), s, line, column, endLine, endColumn, Problem.Severity.ERROR, Problem.Kind.SEMANTIC));
    }
    else
      cu.errors.add(new Problem(sourceFile(), s, lineNumber(), Problem.Severity.ERROR, Problem.Kind.SEMANTIC));
  }

  public void Program.errorCheckCJ(Collection collection) {
    for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit cu = (CompilationUnit)iter.next();
      if (cu.fromSource()) {
        cu.collectErrorsCJ();
        collection.addAll(cu.errors);
      }
    }
  }

  public void ASTNode.collectErrorsCJ() {
    typeCheckCJ();
    for (int i=0; i<getNumChildNoTransform(); i++) {
      getChildNoTransform(i).collectErrorsCJ();
    }
  }

  public void ASTNode.typeCheckCJ() {
  }

  public void MonitorDecl.typeCheckCJ() {
    List<ParameterDeclaration> params = getParameters();
    Opt o = getPerClauseOpt();
    if (o.getNumChildNoTransform() > 0) {
      if (params.getNumChildNoTransform() > 1) {
        error(getID() + ": num. of parameters should be less than 1 " +
              "when it is declared with perClause.");
      }
    } else {
      if (params.getNumChildNoTransform() > 1) {
        error(getID() + ": a contextgroup with more than 1 parameters " +
              "is currently not supported.");
      }
    }
  }

  public void PointcutSpec.typeCheckCJ() {
    PointcutExpr pc = getPointcutExpr();
    if (!(pc instanceof IfPointcutExpr) && !(pc instanceof CflowPointcutExpr)) {
      error("unsupported pointcut expression in when clause");
    }
  }

  public void EventActionSpec.typeCheckCJ() {
    List ids = getEventIDs();
    // TODO: currently it only performs the name checking for the
    //       left-most receiver...
    if (ids.getNumChildNoTransform() > 0) {
      String id = ((EventID)ids.getChildNoTransform(0)).getID();
      SimpleSet var = lookupVariable(id);
      if (var.size() < 1) {
        if(!getProgram().hasTypeCJ(getCompilationUnit().getPackageDecl(), id)){
          error(id + " not found");
        }
      }
      if (var.size() > 1) {
        error("ambiguous event sender: " + id);
      }
    }
  }

  public void BinaryPointcutExpr.typeCheckCJ() {
    String left = getLhs().monitorVarName();
    String right = getRhs().monitorVarName();
    if (left != null && right != null)
      error("monitor pointcut is used multiple times");
  }

  public void ContextDecl.typeCheckCJ() {
    FluentSpec fspec = getFluentSpec();
    if (fspec instanceof ActiveUntilSpec) {
      ActiveUntilSpec auSpec = (ActiveUntilSpec)fspec;
      ActionSpec activeSpec = auSpec.getActive();
      ActionSpec untilSpec = auSpec.getUntil();
      if (activeSpec instanceof PointcutActionSpec) {
        PointcutActionSpec paSpec = (PointcutActionSpec)activeSpec;
        typeCheckCJInternal(paSpec);
      }
      if (untilSpec instanceof PointcutActionSpec) {
        PointcutActionSpec puSpec = (PointcutActionSpec)untilSpec;
        typeCheckCJInternal(puSpec);
      }
    }
  }

  public void Proceed.typeCheckCJ() {
    MethodDecl enclosing = getEnclosingMethodDecl();
    if (enclosing != null) {
      LayerDecl layer = getEnclosingLayerPre();
      if (layer == null) {
        error("proceed is not used within layer declaration");
        return;
      }
      if ((enclosing instanceof BeforePartialMethodDecl) ||
          (enclosing instanceof AfterPartialMethodDecl)) {
        error("proceed is not used within around partial method");
        return;
      }
      ClassDecl enclosingClass = getEnclosingClass();
      if (enclosingClass != null) {
        boolean found = false;
        List<BodyDecl> classBody = enclosingClass.getBodyDecls();
        for (int i=0; i<classBody.getNumChildNoTransform(); i++) {
          BodyDecl decl = classBody.getChildNoTransform(i);
          if ((decl instanceof MethodDecl) &&
              ((MethodDecl)decl).compatible(enclosing))
            found = true;
        }
        if (!found) error("proceed is used in the method whose original declaration is not provided by the class");
      } else {
        error("unexpected error in proceed");
      }
    } else {
      error("proceed is not used within layer declaration");
    }
  }

  public void PerthreadActivateDecl.typeCheckCJ() {
    error("currently the perthread feature is not supported.");
  }

  public void LayerDecl.typeCheckCJ() {
    List<Activate> acts = getActivates();
    for (int i=0; i<acts.getNumChildNoTransform(); i++) {
      Activate act = acts.getChildNoTransform(i);
      LayerDecl req = Program.program.searchLayer(act.getID());
      if (req == null) {
        error("requiring unknown layer: " + act.getID());
      }
    }
  }

  private void ContextDecl.typeCheckCJInternal(PointcutActionSpec spec) {
    List<ParameterDeclaration> params = getMonitorParams();
    for (int i=0; i<params.getNumChildNoTransform(); i++) {
      ParameterDeclaration p = params.getChildNoTransform(i);
      String monitorType = ((TypeAccess)p.getTypeAccess()).getID();
      Vector<String> vec = spec.getPointcutExpr().matchMonitor(monitorType);
      if (vec.size() == 0) {
        error("no monitored objects are found at the action specification");
      } else if (vec.size() > 1) {
        error("multiple monitored objectss are found at the action specification");
      }
    }
  }

  public static Vector<String> Program.cjTypes = new Vector<String>();

  public boolean Program.hasTypeCJ(String pack, String name) {
    return cjTypes.contains(pack + "." + name);
  }

  // TODO: currently comparing methods is performed only based on method names
  public boolean LayerDecl.hasMethodCJ(String mName) {
    Program prog = Program.program;
    for (Iterator<LayerDecl> iter = prog.allLayerDecls.iterator(); iter.hasNext(); ) {
      LayerDecl lDecl = iter.next();
      if (lDecl.getID().equals(getID())) {
        List<BodyDecl> bDecls = lDecl.getBodyDecls();
        for (int i=0; i<bDecls.getNumChildNoTransform(); i++) {
          BodyDecl bDecl = bDecls.getChildNoTransform(i);
          if (bDecl instanceof MethodDecl) {
            MethodDecl mDecl = (MethodDecl)bDecl;
            if (mDecl.getID().equals(mName)) return true;
          }
        }
      }
    }
    ClassDecl cDecl = getEnclosingClass();
    if (cDecl != null) return cDecl.hasMethodCJ(mName);
    return false;
  }

  public boolean ClassDecl.hasMethodCJ(String mName) {
    List<BodyDecl> bDecls = getBodyDecls();
    for (int i=0; i<bDecls.getNumChildNoTransform(); i++) {
      BodyDecl bDecl = bDecls.getChildNoTransform(i);
      if (bDecl instanceof MethodDecl) {
        MethodDecl mDecl = (MethodDecl)bDecl;
        if (mDecl.getID().equals(mName)) return true;
      }
    }
    return false;
  }

}
